x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
    AIRFLOW__CORE__HOSTNAME_CALLABLE: airflow.utils.net.getfqdn
    AIRFLOW__CORE__DEFAULT_TIMEZONE: 'America/Sao_Paulo'
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__CORE__PARALLELISM: '64'
    AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: '32'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__MAX_CONSECUTIVE_FAILED_DAG_RUNS_PER_DAG: '0'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false' # 'true' PARA ATIVAR E TER DAGS DE EXEMPLO
    AIRFLOW__CORE__EXECUTE_TASKS_NEW_PYTHON_INTERPRETER: 'false'
    AIRFLOW__CORE__FERNET_KEY: Uqv6pwYWJn7xifR3QAkifMTkupos8mkxaQL2Q7Ydsqw=
    AIRFLOW__CORE__DONOT_PICKLE: 'true'
    AIRFLOW__CORE__DAGBAG_IMPORT_ERROR_TRACEBACKS: 'true'
    AIRFLOW__CORE__DAGBAG_IMPORT_ERROR_TRACEBACK_DEPTH: '2'
    AIRFLOW__CORE__TASK_RUNNER: StandardTaskRunner
    AIRFLOW__LOGGING__CELERY_LOGGING_LEVEL: 'INFO'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW_WWW_USER_USERNAME: etladmin
    AIRFLOW_WWW_USER_PASSWORD: automacao123
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: '120'
    AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: '180'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__INSTANCE_NAME: "ETL - AUTOMAÇÃO BB"
    AIRFLOW__CORE__LAZY_LOAD_PLUGINS: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:automacao123@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:automacao123@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
  volumes:
    - /var/docker/airflow/dags:/opt/airflow/dags
    - /var/docker/airflow/logs:/opt/airflow/logs
    - /var/docker/airflow/config:/opt/airflow/config
    - /var/docker/airflow/plugins:/opt/airflow/plugins
  user: "50000:0"
  depends_on:
    &airflow-common-depends-on
    redis:
        condition: service_healthy
    postgres:
        condition: service_healthy    

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: automacao123
      POSTGRES_DB: airflow
    volumes:
      - /var/docker/postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "5500:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        chown -R "50000:0" /opt/airflow/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: automacao123
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "50000:0"
    volumes:
      - /var/docker/airflow/sources:/sources
    depends_on:
      &airflow-common-depends-on
      redis:
          condition: service_healthy
      postgres:
          condition: service_healthy  
  
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
  
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  v_dags:
    driver: local
    driver_opts:
      type: none
      o: bind
  v_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
  v_config:
    driver: local
    driver_opts:
      type: none
      o: bind
  v_plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
  v_postgres:
    driver: local
    driver_opts:
      type: none
      o: bind
  v_sources:
    driver: local
    driver_opts:
      type: none
      o: bind